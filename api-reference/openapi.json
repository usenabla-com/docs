{
  "openapi": "3.1.0",
  "info": {
    "title": "Nabla Evidence Engine API",
    "version": "0.2.0",
    "description": "GRC evidence orchestration and delivery API. Manage evidence source connections, package evidence, and deliver to compliance and security platforms.",
    "contact": {
      "name": "Nabla",
      "url": "https://www.usenabla.com"
    }
  },
  "servers": [
    {
<<<<<<< Updated upstream
      "url": "https://api.usenabla.com/v1",
      "description": "Primary"
    },
    {
      "url": "https://api.gov.usenabla.com/v1",
      "description": "GovCloud"
    }
  ],
  "tags": [
    {
      "name": "Evidence"
=======
      "url": "https://api.example.com/v1"
>>>>>>> Stashed changes
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/evidence": {
      "post": {
        "tags": ["Evidence"],
        "summary": "Generate evidence from repository",
        "description": "Generate compliance evidence from a repository in specified format",
        "parameters": [
          {
            "in": "header",
            "name": "X-Customer-Key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Customer API key for authentication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "format", "source_type", "source_path", "destination"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name for the evidence generation request"
                  },
                  "format": {
                    "type": "string",
                    "enum": ["oscal", "yaml", "json"],
                    "description": "Output format for the evidence"
                  },
                  "source_type": {
                    "type": "string",
                    "enum": ["terraform_state"],
                    "description": "Type of evidence source to parse"
                  },
                  "source_path": {
                    "type": "string",
                    "description": "Path to evidence source (local file path or remote URL)"
                  },
                  "source_credentials": {
                    "type": "string",
                    "description": "JSON object containing source-specific credentials for authentication"
                  },
                  "repo": {
                    "type": "string",
                    "description": "Optional repository URL or identifier for Terraform configurations without remote state"
                  },
                  "destination": {
                    "type": "string",
                    "enum": ["paramify", "local"],
                    "description": "Predefined destination for evidence delivery"
                  },
                  "destination_credentials": {
                    "type": "string",
                    "description": "JSON object containing destination-specific credentials (not required for 'local' destination)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Evidence generation completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": ["queued", "running", "completed", "failed"]
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": ["id", "status", "created_at"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "422": {
            "$ref": "#/components/responses/Unprocessable"
          }
        }
      }
    },
    "/v1/diagram": {
      "post": {
        "tags": ["Evidence"],
        "summary": "Generate architecture diagram from statefile",
        "description": "Generate deterministic architecture diagram from Terraform statefile",
        "parameters": [
          {
            "in": "header",
            "name": "X-Customer-Key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Customer API key for authentication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": ["name", "statefile_path"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name for the diagram generation request"
                  },
                  "statefile_path": {
                    "type": "string",
                    "description": "Path to Terraform statefile (local file path or remote URL)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Diagram generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "svg_content": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "graph_json": {
                      "type": "string"
                    },
                    "scene_json": {
                      "type": "string"
                    },
                    "sha256_hashes": {
                      "type": "object",
                      "properties": {
                        "graph_sha256": {
                          "type": "string"
                        },
                        "scene_sha256": {
                          "type": "string"
                        },
                        "svg_sha256": {
                          "type": "string"
                        }
                      },
                      "required": ["graph_sha256", "scene_sha256", "svg_sha256"]
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "generated_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "source": {
                          "type": "string"
                        },
                        "rules_version": {
                          "type": "string"
                        },
                        "node_count": {
                          "type": "integer"
                        },
                        "edge_count": {
                          "type": "integer"
                        }
                      },
                      "required": ["generated_at", "source", "rules_version", "node_count", "edge_count"]
                    }
                  },
                  "required": ["svg_content", "description", "graph_json", "scene_json", "sha256_hashes", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "422": {
            "$ref": "#/components/responses/Unprocessable"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Not authenticated",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unprocessable": {
        "description": "Unprocessable entity",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        },
        "required": ["error", "message"]
      }
    }
  }
}
